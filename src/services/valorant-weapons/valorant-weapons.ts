// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ValorantWeapon, valorantWeaponResponse } from './models/valorant-weapon';
import { GetValorantWeaponsParams } from './request-params';

export class ValorantWeaponsService extends BaseService {
  /**
   * List weapons
   * @param {FilterOverValorantWeapons} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverValorantWeapons} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverValorantWeapons} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<ValorantWeapon[]>>} A list of Valorant weapons
   */
  async getValorantWeapons(
    params?: GetValorantWeaponsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantWeapon[]>> {
    const request = new RequestBuilder<ValorantWeapon[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/weapons')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(valorantWeaponResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<ValorantWeapon[]>(request);
  }

  /**
   * Get a Valorant weapon by its ID
   * @param {number} valorantWeaponId - ID of the Valorant weapon
   * @returns {Promise<HttpResponse<ValorantWeapon>>} A Valorant weapon
   */
  async getValorantWeaponsValorantWeaponId(
    valorantWeaponId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantWeapon>> {
    const request = new RequestBuilder<ValorantWeapon>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/weapons/{valorant_weapon_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantWeaponResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'valorant_weapon_id',
        value: valorantWeaponId,
      })
      .build();
    return this.client.call<ValorantWeapon>(request);
  }
}
