// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { OwStatsForPlayerByGame, owStatsForPlayerByGameResponse } from './models/ow-stats-for-player-by-game';
import { PlayerIdOrSlug } from '../common/player-id-or-slug';
import {
  OwStatsForAllPlayersByMatch,
  owStatsForAllPlayersByMatchResponse,
} from './models/ow-stats-for-all-players-by-match';
import { MatchIdOrSlug } from '../common/match-id-or-slug';
import { OwStatsForPlayerByMatch, owStatsForPlayerByMatchResponse } from './models/ow-stats-for-player-by-match';
import { OwStatsForPlayer, owStatsForPlayerResponse } from './models/ow-stats-for-player';
import { GetOwPlayersPlayerIdOrSlugStatsParams } from './request-params';
import { OwStatsForPlayerBySerie, owStatsForPlayerBySerieResponse } from './models/ow-stats-for-player-by-serie';
import { SerieIdOrSlug } from '../common/serie-id-or-slug';
import {
  OwStatsForPlayerByTournament,
  owStatsForPlayerByTournamentResponse,
} from './models/ow-stats-for-player-by-tournament';
import { TournamentIdOrSlug } from '../common/tournament-id-or-slug';

export class OwStatsService extends BaseService {
  /**
   * Get detailed statistics of a given Overwatch given player for the given game
   * @param {number} owGameId - An Overwatch game ID
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<OwStatsForPlayerByGame>>} Statistics of an Overwatch player by game
   */
  async getOwGamesOwGameIdPlayersPlayerIdOrSlugStats(
    owGameId: number,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForPlayerByGame>> {
    const request = new RequestBuilder<OwStatsForPlayerByGame>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/games/{ow_game_id}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForPlayerByGameResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'ow_game_id',
        value: owGameId,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<OwStatsForPlayerByGame>(request);
  }

  /**
   * Get detailed statistics of Overwatch players for the given match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @returns {Promise<HttpResponse<OwStatsForAllPlayersByMatch>>} Statistics of all Overwatch players by match
   */
  async getOwMatchesMatchIdOrSlugPlayersStats(
    matchIdOrSlug: MatchIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForAllPlayersByMatch>> {
    const request = new RequestBuilder<OwStatsForAllPlayersByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/matches/{match_id_or_slug}/players/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForAllPlayersByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .build();
    return this.client.call<OwStatsForAllPlayersByMatch>(request);
  }

  /**
   * Get detailed statistics of a given Overwatch given player for the given match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<OwStatsForPlayerByMatch>>} Statistics of an Overwatch player by match
   */
  async getOwMatchesMatchIdOrSlugPlayersPlayerIdOrSlugStats(
    matchIdOrSlug: MatchIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForPlayerByMatch>> {
    const request = new RequestBuilder<OwStatsForPlayerByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/matches/{match_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForPlayerByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<OwStatsForPlayerByMatch>(request);
  }

  /**
   * Get detailed statistics of a given Overwatch player
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @param {string} [from] - Filter out 'from' date
   * @param {string} [to] - Filter out 'to' date
   * @returns {Promise<HttpResponse<OwStatsForPlayer>>} Statistics of an Overwatch player
   */
  async getOwPlayersPlayerIdOrSlugStats(
    playerIdOrSlug: PlayerIdOrSlug,
    params?: GetOwPlayersPlayerIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForPlayer>> {
    const request = new RequestBuilder<OwStatsForPlayer>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForPlayerResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .addQueryParam({
        key: 'from',
        value: params?.from,
      })
      .addQueryParam({
        key: 'to',
        value: params?.to,
      })
      .build();
    return this.client.call<OwStatsForPlayer>(request);
  }

  /**
   * Get detailed statistics of a given Overwatch given player for the given serie
   * @param {SerieIdOrSlug} serieIdOrSlug - A serie ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<OwStatsForPlayerBySerie>>} Statistics of an Overwatch player by serie
   */
  async getOwSeriesSerieIdOrSlugPlayersPlayerIdOrSlugStats(
    serieIdOrSlug: SerieIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForPlayerBySerie>> {
    const request = new RequestBuilder<OwStatsForPlayerBySerie>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/series/{serie_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForPlayerBySerieResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'serie_id_or_slug',
        value: serieIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<OwStatsForPlayerBySerie>(request);
  }

  /**
   * Get detailed statistics of a given Overwatch player for the given tournament
   * @param {TournamentIdOrSlug} tournamentIdOrSlug - A tournament ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<OwStatsForPlayerByTournament>>} Statistics of an Overwatch player by tournament
   */
  async getOwTournamentsTournamentIdOrSlugPlayersPlayerIdOrSlugStats(
    tournamentIdOrSlug: TournamentIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<OwStatsForPlayerByTournament>> {
    const request = new RequestBuilder<OwStatsForPlayerByTournament>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/ow/tournaments/{tournament_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(owStatsForPlayerByTournamentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'tournament_id_or_slug',
        value: tournamentIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<OwStatsForPlayerByTournament>(request);
  }
}
