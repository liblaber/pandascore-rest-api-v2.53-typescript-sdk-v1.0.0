// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import {
  ValorantStatsForPlayersByMatch,
  valorantStatsForPlayersByMatchResponse,
} from './models/valorant-stats-for-players-by-match';
import { MatchIdOrSlug } from '../common/match-id-or-slug';
import {
  ValorantStatsForTeamByMatch,
  valorantStatsForTeamByMatchResponse,
} from './models/valorant-stats-for-team-by-match';
import { TeamIdOrSlug } from '../common/team-id-or-slug';
import { ValorantStatsForPlayer, valorantStatsForPlayerResponse } from './models/valorant-stats-for-player';
import { PlayerIdOrSlug } from '../common/player-id-or-slug';
import {
  GetValorantPlayersPlayerIdOrSlugStatsParams,
  GetValorantSeriesSerieIdOrSlugPlayersPlayerIdOrSlugStatsParams,
  GetValorantSeriesSerieIdOrSlugTeamsTeamIdOrSlugStatsParams,
  GetValorantTeamsTeamIdOrSlugStatsParams,
  GetValorantTournamentsTournamentIdOrSlugPlayersPlayerIdOrSlugStatsParams,
  GetValorantTournamentsTournamentIdOrSlugTeamsTeamIdOrSlugStatsParams,
} from './request-params';
import {
  ValorantStatsForPlayerBySerie,
  valorantStatsForPlayerBySerieResponse,
} from './models/valorant-stats-for-player-by-serie';
import { SerieIdOrSlug } from '../common/serie-id-or-slug';
import {
  ValorantStatsForTeamBySerie,
  valorantStatsForTeamBySerieResponse,
} from './models/valorant-stats-for-team-by-serie';
import { ValorantStatsForTeam, valorantStatsForTeamResponse } from './models/valorant-stats-for-team';
import {
  ValorantStatsForPlayerByTournament,
  valorantStatsForPlayerByTournamentResponse,
} from './models/valorant-stats-for-player-by-tournament';
import { TournamentIdOrSlug } from '../common/tournament-id-or-slug';
import {
  ValorantStatsForTeamByTournament,
  valorantStatsForTeamByTournamentResponse,
} from './models/valorant-stats-for-team-by-tournament';

export class ValorantStatsService extends BaseService {
  /**
   * Get the aggregated statistics for all players in a Valorant match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @returns {Promise<HttpResponse<ValorantStatsForPlayersByMatch>>} Statistics of all Valorant players by match
   */
  async getValorantMatchesMatchIdOrSlugPlayersStats(
    matchIdOrSlug: MatchIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForPlayersByMatch>> {
    const request = new RequestBuilder<ValorantStatsForPlayersByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/matches/{match_id_or_slug}/players/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForPlayersByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .build();
    return this.client.call<ValorantStatsForPlayersByMatch>(request);
  }

  /**
   * Get the aggregated team statistics for a Valorant match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @returns {Promise<HttpResponse<ValorantStatsForTeamByMatch>>} Statistics of a Valorant team by match
   */
  async getValorantMatchesMatchIdOrSlugTeamsTeamIdOrSlugStats(
    matchIdOrSlug: MatchIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForTeamByMatch>> {
    const request = new RequestBuilder<ValorantStatsForTeamByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/matches/{match_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForTeamByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .build();
    return this.client.call<ValorantStatsForTeamByMatch>(request);
  }

  /**
   * Get a Valorant player stats by ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @param {string} [from] - Filter out 'from' date
   * @param {string} [to] - Filter out 'to' date
   * @returns {Promise<HttpResponse<ValorantStatsForPlayer>>} Statistics of a Valorant player
   */
  async getValorantPlayersPlayerIdOrSlugStats(
    playerIdOrSlug: PlayerIdOrSlug,
    params?: GetValorantPlayersPlayerIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForPlayer>> {
    const request = new RequestBuilder<ValorantStatsForPlayer>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForPlayerResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .addQueryParam({
        key: 'from',
        value: params?.from,
      })
      .addQueryParam({
        key: 'to',
        value: params?.to,
      })
      .build();
    return this.client.call<ValorantStatsForPlayer>(request);
  }

  /**
   * Get the aggregated player statistics for a Valorant series
   * @param {SerieIdOrSlug} serieIdOrSlug - A serie ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @returns {Promise<HttpResponse<ValorantStatsForPlayerBySerie>>} Statistics of a Valorant player by serie
   */
  async getValorantSeriesSerieIdOrSlugPlayersPlayerIdOrSlugStats(
    serieIdOrSlug: SerieIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    params?: GetValorantSeriesSerieIdOrSlugPlayersPlayerIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForPlayerBySerie>> {
    const request = new RequestBuilder<ValorantStatsForPlayerBySerie>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/series/{serie_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForPlayerBySerieResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'serie_id_or_slug',
        value: serieIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .build();
    return this.client.call<ValorantStatsForPlayerBySerie>(request);
  }

  /**
   * Get the aggregated team statistics for a Valorant series
   * @param {SerieIdOrSlug} serieIdOrSlug - A serie ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @returns {Promise<HttpResponse<ValorantStatsForTeamBySerie>>} Statistics of a Valorant team by serie
   */
  async getValorantSeriesSerieIdOrSlugTeamsTeamIdOrSlugStats(
    serieIdOrSlug: SerieIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetValorantSeriesSerieIdOrSlugTeamsTeamIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForTeamBySerie>> {
    const request = new RequestBuilder<ValorantStatsForTeamBySerie>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/series/{serie_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForTeamBySerieResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'serie_id_or_slug',
        value: serieIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .build();
    return this.client.call<ValorantStatsForTeamBySerie>(request);
  }

  /**
   * Get a Valorant team stats by ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @param {string} [from] - Filter out 'from' date
   * @param {string} [to] - Filter out 'to' date
   * @returns {Promise<HttpResponse<ValorantStatsForTeam>>} Statistics of a Valorant team
   */
  async getValorantTeamsTeamIdOrSlugStats(
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetValorantTeamsTeamIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForTeam>> {
    const request = new RequestBuilder<ValorantStatsForTeam>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForTeamResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .addQueryParam({
        key: 'from',
        value: params?.from,
      })
      .addQueryParam({
        key: 'to',
        value: params?.to,
      })
      .build();
    return this.client.call<ValorantStatsForTeam>(request);
  }

  /**
   * Get the aggregated player statistics for a Valorant tournament
   * @param {TournamentIdOrSlug} tournamentIdOrSlug - A tournament ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @returns {Promise<HttpResponse<ValorantStatsForPlayerByTournament>>} Statistics of a Valorant player by tournament
   */
  async getValorantTournamentsTournamentIdOrSlugPlayersPlayerIdOrSlugStats(
    tournamentIdOrSlug: TournamentIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    params?: GetValorantTournamentsTournamentIdOrSlugPlayersPlayerIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForPlayerByTournament>> {
    const request = new RequestBuilder<ValorantStatsForPlayerByTournament>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/tournaments/{tournament_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForPlayerByTournamentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'tournament_id_or_slug',
        value: tournamentIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .build();
    return this.client.call<ValorantStatsForPlayerByTournament>(request);
  }

  /**
   * Get the aggregated team statistics for a Valorant tournament
   * @param {TournamentIdOrSlug} tournamentIdOrSlug - A tournament ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {VideogameVersionOrAll} [videogameVersion] -
   * @returns {Promise<HttpResponse<ValorantStatsForTeamByTournament>>} Statistics of a Valorant team by tournament
   */
  async getValorantTournamentsTournamentIdOrSlugTeamsTeamIdOrSlugStats(
    tournamentIdOrSlug: TournamentIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetValorantTournamentsTournamentIdOrSlugTeamsTeamIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValorantStatsForTeamByTournament>> {
    const request = new RequestBuilder<ValorantStatsForTeamByTournament>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/valorant/tournaments/{tournament_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(valorantStatsForTeamByTournamentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'tournament_id_or_slug',
        value: tournamentIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_version',
        value: params?.videogameVersion,
      })
      .build();
    return this.client.call<ValorantStatsForTeamByTournament>(request);
  }
}
