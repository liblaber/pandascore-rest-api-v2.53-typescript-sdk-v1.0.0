// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { LoLRune, loLRuneResponse } from '../common/lo-l-rune';
import { GetLolRunesParams, GetLolRunesReforgedParams, GetLolRunesReforgedPathsParams } from './request-params';
import { LoLRuneReforged, loLRuneReforgedResponse } from '../common/lo-l-rune-reforged';
import { LoLRunePath, loLRunePathResponse } from './models/lo-l-rune-path';

export class LoLRunesService extends BaseService {
  /**
   * List runes
   * @param {FilterOverLoLRunes} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverLoLRunes} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverLoLRunes} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLRune[]>>} A list of League-of-Legends runes
   */
  async getLolRunes(params?: GetLolRunesParams, requestConfig?: RequestConfig): Promise<HttpResponse<LoLRune[]>> {
    const request = new RequestBuilder<LoLRune[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLRuneResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLRune[]>(request);
  }

  /**
   * List the latest version of League of Legends (reforged) runes
   * @param {FilterOverLoLRunesReforged} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverLoLRunesReforged} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverLoLRunesReforged} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLRuneReforged[]>>} A list of League-of-Legends (reforged) runes
   */
  async getLolRunesReforged(
    params?: GetLolRunesReforgedParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLRuneReforged[]>> {
    const request = new RequestBuilder<LoLRuneReforged[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes-reforged')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLRuneReforgedResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLRuneReforged[]>(request);
  }

  /**
   * List the latest version of League of Legends (reforged) rune paths
   * @param {FilterOverLoLRunePaths} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverLoLRunePaths} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverLoLRunePaths} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLRunePath[]>>} A list of League-of-Legends runes paths
   */
  async getLolRunesReforgedPaths(
    params?: GetLolRunesReforgedPathsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLRunePath[]>> {
    const request = new RequestBuilder<LoLRunePath[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes-reforged-paths')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLRunePathResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLRunePath[]>(request);
  }

  /**
   * Retrieve the latest version of a League of Legends (reforged) rune path by its ID
   * @param {number} lolRunePathId - ID of the LoL rune path
   * @returns {Promise<HttpResponse<LoLRunePath>>} A League-of-Legends runes path
   */
  async getLolRunesReforgedPathsLolRunePathId(
    lolRunePathId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLRunePath>> {
    const request = new RequestBuilder<LoLRunePath>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes-reforged-paths/{lol_rune_path_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(loLRunePathResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_rune_path_id',
        value: lolRunePathId,
      })
      .build();
    return this.client.call<LoLRunePath>(request);
  }

  /**
   * Retrieve the latest version of a League of Legends (reforged) rune by its ID
   * @param {number} lolRuneReforgedId - ID of the LoL rune
   * @returns {Promise<HttpResponse<LoLRuneReforged>>} A League-of-Legends (reforged) rune
   */
  async getLolRunesReforgedLolRuneReforgedId(
    lolRuneReforgedId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLRuneReforged>> {
    const request = new RequestBuilder<LoLRuneReforged>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes-reforged/{lol_rune_reforged_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(loLRuneReforgedResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_rune_reforged_id',
        value: lolRuneReforgedId,
      })
      .build();
    return this.client.call<LoLRuneReforged>(request);
  }

  /**
   * Get a single rune by ID
   * @param {number} lolRuneId - A rune ID
   * @returns {Promise<HttpResponse<LoLRune>>} A League-of-Legends rune
   */
  async getLolRunesLolRuneId(lolRuneId: number, requestConfig?: RequestConfig): Promise<HttpResponse<LoLRune>> {
    const request = new RequestBuilder<LoLRune>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/runes/{lol_rune_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(loLRuneResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_rune_id',
        value: lolRuneId,
      })
      .build();
    return this.client.call<LoLRune>(request);
  }
}
