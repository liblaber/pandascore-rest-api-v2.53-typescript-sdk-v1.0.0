// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { Live, liveResponse } from './models/live';
import { GetLivesParams } from './request-params';

export class LivesService extends BaseService {
  /**
   * List currently running live matches, available from pandascore with live websocket data.
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<Live[]>>} A list of games being played or about to be played
   */
  async getLives(params?: GetLivesParams, requestConfig?: RequestConfig): Promise<HttpResponse<Live[]>> {
    const request = new RequestBuilder<Live[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lives')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(liveResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<Live[]>(request);
  }
}
