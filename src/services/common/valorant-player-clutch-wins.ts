// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const valorantPlayerClutchWins = z.lazy(() => {
  return z.object({
    versus1: z.number().gte(0).nullable(),
    versus2: z.number().gte(0).nullable(),
    versus3: z.number().gte(0).nullable(),
    versus4: z.number().gte(0).nullable(),
    versus5: z.number().gte(0).nullable(),
  });
});

/**
 * Round wins when the player was the last team member alive
 * @typedef  {ValorantPlayerClutchWins} valorantPlayerClutchWins - Round wins when the player was the last team member alive - Round wins when the player was the last team member alive
 * @property {number} - Number of clutch wins versus 1 player
 * @property {number} - Number of clutch wins versus 2 players
 * @property {number} - Number of clutch wins versus 3 players
 * @property {number} - Number of clutch wins versus 4 players
 * @property {number} - Number of clutch wins versus 5 players
 */
export type ValorantPlayerClutchWins = z.infer<typeof valorantPlayerClutchWins>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const valorantPlayerClutchWinsResponse = z.lazy(() => {
  return z
    .object({
      versus_1: z.number().gte(0).nullable(),
      versus_2: z.number().gte(0).nullable(),
      versus_3: z.number().gte(0).nullable(),
      versus_4: z.number().gte(0).nullable(),
      versus_5: z.number().gte(0).nullable(),
    })
    .transform((data) => ({
      versus1: data['versus_1'],
      versus2: data['versus_2'],
      versus3: data['versus_3'],
      versus4: data['versus_4'],
      versus5: data['versus_5'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const valorantPlayerClutchWinsRequest = z.lazy(() => {
  return z
    .object({
      versus1: z.number().nullish(),
      versus2: z.number().nullish(),
      versus3: z.number().nullish(),
      versus4: z.number().nullish(),
      versus5: z.number().nullish(),
    })
    .transform((data) => ({
      versus_1: data['versus1'],
      versus_2: data['versus2'],
      versus_3: data['versus3'],
      versus_4: data['versus4'],
      versus_5: data['versus5'],
    }));
});
