// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  loLEventNashorObject,
  loLEventNashorObjectRequest,
  loLEventNashorObjectResponse,
} from './lo-l-event-nashor-object';

/**
 * The shape of the model inside the application code - what the users use
 */
export const loLEventNashor = z.lazy(() => {
  return z.object({
    object: loLEventNashorObject,
    type: z.string(),
  });
});

/**
 *
 * @typedef  {LoLEventNashor} loLEventNashor
 * @property {LoLEventNashorObject}
 * @property {LoLEventNashorType}
 */
export type LoLEventNashor = z.infer<typeof loLEventNashor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventNashorResponse = z.lazy(() => {
  return z
    .object({
      object: loLEventNashorObjectResponse,
      type: z.string(),
    })
    .transform((data) => ({
      object: data['object'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventNashorRequest = z.lazy(() => {
  return z.object({ object: loLEventNashorObjectRequest.nullish(), type: z.string().nullish() }).transform((data) => ({
    object: data['object'],
    type: data['type'],
  }));
});
