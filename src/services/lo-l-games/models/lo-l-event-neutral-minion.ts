// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  loLEventNeutralMinionObject,
  loLEventNeutralMinionObjectRequest,
  loLEventNeutralMinionObjectResponse,
} from './lo-l-event-neutral-minion-object';

/**
 * The shape of the model inside the application code - what the users use
 */
export const loLEventNeutralMinion = z.lazy(() => {
  return z.object({
    object: loLEventNeutralMinionObject,
    type: z.string(),
  });
});

/**
 *
 * @typedef  {LoLEventNeutralMinion} loLEventNeutralMinion
 * @property {LoLEventNeutralMinionObject}
 * @property {LoLEventNeutralMinionType}
 */
export type LoLEventNeutralMinion = z.infer<typeof loLEventNeutralMinion>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventNeutralMinionResponse = z.lazy(() => {
  return z
    .object({
      object: loLEventNeutralMinionObjectResponse,
      type: z.string(),
    })
    .transform((data) => ({
      object: data['object'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventNeutralMinionRequest = z.lazy(() => {
  return z
    .object({ object: loLEventNeutralMinionObjectRequest.nullish(), type: z.string().nullish() })
    .transform((data) => ({
      object: data['object'],
      type: data['type'],
    }));
});
