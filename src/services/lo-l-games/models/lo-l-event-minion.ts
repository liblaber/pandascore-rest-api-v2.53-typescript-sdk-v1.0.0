// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  loLEventMinionObject,
  loLEventMinionObjectRequest,
  loLEventMinionObjectResponse,
} from './lo-l-event-minion-object';

/**
 * The shape of the model inside the application code - what the users use
 */
export const loLEventMinion = z.lazy(() => {
  return z.object({
    object: loLEventMinionObject,
    type: z.string(),
  });
});

/**
 *
 * @typedef  {LoLEventMinion} loLEventMinion
 * @property {LoLEventMinionObject}
 * @property {LoLEventMinionType}
 */
export type LoLEventMinion = z.infer<typeof loLEventMinion>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventMinionResponse = z.lazy(() => {
  return z
    .object({
      object: loLEventMinionObjectResponse,
      type: z.string(),
    })
    .transform((data) => ({
      object: data['object'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const loLEventMinionRequest = z.lazy(() => {
  return z.object({ object: loLEventMinionObjectRequest.nullish(), type: z.string().nullish() }).transform((data) => ({
    object: data['object'],
    type: data['type'],
  }));
});
