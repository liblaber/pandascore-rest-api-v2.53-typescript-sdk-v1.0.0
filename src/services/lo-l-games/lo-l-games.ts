// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { LoLGame, loLGameResponse } from './models/lo-l-game';
import { LoLGameEvent, loLGameEventResponse } from './models/lo-l-game-event';
import {
  GetLolGamesLolGameIdEventsParams,
  GetLolGamesLolGameIdFramesParams,
  GetLolMatchesMatchIdOrSlugGamesParams,
  GetLolTeamsTeamIdOrSlugGamesParams,
} from './request-params';
import { LoLGameFrame, loLGameFrameResponse } from './models/lo-l-game-frame';
import { MatchIdOrSlug } from '../common/match-id-or-slug';
import { LoLTeamLastGame, loLTeamLastGameResponse } from '../common/lo-l-team-last-game';
import { TeamIdOrSlug } from '../common/team-id-or-slug';

export class LoLGamesService extends BaseService {
  /**
   * Get a single League of Legends game by ID
   * @param {number} lolGameId - A LoL game ID
   * @returns {Promise<HttpResponse<LoLGame>>} A League-of-Legends game
   */
  async getLolGamesLolGameId(lolGameId: number, requestConfig?: RequestConfig): Promise<HttpResponse<LoLGame>> {
    const request = new RequestBuilder<LoLGame>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/games/{lol_game_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(loLGameResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_game_id',
        value: lolGameId,
      })
      .build();
    return this.client.call<LoLGame>(request);
  }

  /**
   * List events for a given League of Legends game
   * @param {number} lolGameId - A LoL game ID
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLGameEvent[]>>} A list of League-of-Legends game events
   */
  async getLolGamesLolGameIdEvents(
    lolGameId: number,
    params?: GetLolGamesLolGameIdEventsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLGameEvent[]>> {
    const request = new RequestBuilder<LoLGameEvent[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/games/{lol_game_id}/events')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLGameEventResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_game_id',
        value: lolGameId,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLGameEvent[]>(request);
  }

  /**
   * List frames for a given League of Legends game
   * @param {number} lolGameId - A LoL game ID
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLGameFrame[]>>} A list of League-of-Legends game frames
   */
  async getLolGamesLolGameIdFrames(
    lolGameId: number,
    params?: GetLolGamesLolGameIdFramesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLGameFrame[]>> {
    const request = new RequestBuilder<LoLGameFrame[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/games/{lol_game_id}/frames')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLGameFrameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'lol_game_id',
        value: lolGameId,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLGameFrame[]>(request);
  }

  /**
   * List games for a given League of Legends match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {FilterOverLoLGames} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverLoLGames} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverLoLGames} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLGame[]>>} A list of League-of-Legends games
   */
  async getLolMatchesMatchIdOrSlugGames(
    matchIdOrSlug: MatchIdOrSlug,
    params?: GetLolMatchesMatchIdOrSlugGamesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLGame[]>> {
    const request = new RequestBuilder<LoLGame[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/matches/{match_id_or_slug}/games')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLGameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLGame[]>(request);
  }

  /**
   * List finished games for a given League of Legends team
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {FilterOverLoLTeamLastGames} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverLoLTeamLastGames} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverLoLTeamLastGames} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<LoLTeamLastGame[]>>} A list of League-of-Legends games
   */
  async getLolTeamsTeamIdOrSlugGames(
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetLolTeamsTeamIdOrSlugGamesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LoLTeamLastGame[]>> {
    const request = new RequestBuilder<LoLTeamLastGame[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/lol/teams/{team_id_or_slug}/games')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(loLTeamLastGameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<LoLTeamLastGame[]>(request);
  }
}
