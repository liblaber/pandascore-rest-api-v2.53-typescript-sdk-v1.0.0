// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const searchOverDota2Games = z.lazy(() => {
  return z.object({
    status: z.string().optional(),
    winnerType: z.string().optional(),
  });
});

/**
 *
 * @typedef  {SearchOverDota2Games} searchOverDota2Games
 * @property {GameStatus} - The game status
 * @property {OpponentType}
 */
export type SearchOverDota2Games = z.infer<typeof searchOverDota2Games>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOverDota2GamesResponse = z.lazy(() => {
  return z
    .object({
      status: z.string().optional(),
      winner_type: z.string().optional(),
    })
    .transform((data) => ({
      status: data['status'],
      winnerType: data['winner_type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOverDota2GamesRequest = z.lazy(() => {
  return z.object({ status: z.string().nullish(), winnerType: z.string().nullish() }).transform((data) => ({
    status: data['status'],
    winner_type: data['winnerType'],
  }));
});
