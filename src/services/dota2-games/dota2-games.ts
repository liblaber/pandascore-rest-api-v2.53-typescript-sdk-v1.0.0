// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { Dota2Game, dota2GameResponse } from './models/dota2-game';
import { Dota2Frame, dota2FrameResponse } from './models/dota2-frame';
import {
  GetDota2GamesDota2GameIdFramesParams,
  GetDota2MatchesMatchIdOrSlugGamesParams,
  GetDota2TeamsTeamIdOrSlugGamesParams,
} from './request-params';
import { MatchIdOrSlug } from '../common/match-id-or-slug';
import { BaseDota2Game, baseDota2GameResponse } from '../common/base-dota2-game';
import { TeamIdOrSlug } from '../common/team-id-or-slug';

export class Dota2GamesService extends BaseService {
  /**
   * Get a single Dota 2 game by ID
   * @param {number} dota2GameId - A game ID
   * @returns {Promise<HttpResponse<Dota2Game>>} A Dota2 game
   */
  async getDota2GamesDota2GameId(dota2GameId: number, requestConfig?: RequestConfig): Promise<HttpResponse<Dota2Game>> {
    const request = new RequestBuilder<Dota2Game>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/dota2/games/{dota2_game_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(dota2GameResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'dota2_game_id',
        value: dota2GameId,
      })
      .build();
    return this.client.call<Dota2Game>(request);
  }

  /**
   * List frames for a given Dota 2 game
   * @param {number} dota2GameId - A game ID
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<Dota2Frame[]>>} A list of Dota2 game frames
   */
  async getDota2GamesDota2GameIdFrames(
    dota2GameId: number,
    params?: GetDota2GamesDota2GameIdFramesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<Dota2Frame[]>> {
    const request = new RequestBuilder<Dota2Frame[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/dota2/games/{dota2_game_id}/frames')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(dota2FrameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'dota2_game_id',
        value: dota2GameId,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<Dota2Frame[]>(request);
  }

  /**
   * List games for a given Dota 2 match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {FilterOverDota2Games} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverDota2Games} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverDota2Games} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<Dota2Game[]>>} A list of Dota2 games
   */
  async getDota2MatchesMatchIdOrSlugGames(
    matchIdOrSlug: MatchIdOrSlug,
    params?: GetDota2MatchesMatchIdOrSlugGamesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<Dota2Game[]>> {
    const request = new RequestBuilder<Dota2Game[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/dota2/matches/{match_id_or_slug}/games')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(dota2GameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<Dota2Game[]>(request);
  }

  /**
   * List finished games for a given Dota 2 team
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<BaseDota2Game[]>>} A list of Dota2 games
   */
  async getDota2TeamsTeamIdOrSlugGames(
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetDota2TeamsTeamIdOrSlugGamesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<BaseDota2Game[]>> {
    const request = new RequestBuilder<BaseDota2Game[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/dota2/teams/{team_id_or_slug}/games')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(baseDota2GameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<BaseDota2Game[]>(request);
  }
}
