// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import {
  CsgoStatsForAllPlayersByMatch,
  csgoStatsForAllPlayersByMatchResponse,
} from './models/csgo-stats-for-all-players-by-match';
import { MatchIdOrSlug } from '../common/match-id-or-slug';
import { CsgoStatsForPlayerByMatch, csgoStatsForPlayerByMatchResponse } from './models/csgo-stats-for-player-by-match';
import { PlayerIdOrSlug } from '../common/player-id-or-slug';
import { CsgoStatsForTeamByMatch, csgoStatsForTeamByMatchResponse } from './models/csgo-stats-for-team-by-match';
import { TeamIdOrSlug } from '../common/team-id-or-slug';
import { CsgoStatsForPlayer, csgoStatsForPlayerResponse } from './models/csgo-stats-for-player';
import { GetCsgoPlayersPlayerIdOrSlugStatsParams, GetCsgoTeamsTeamIdOrSlugStatsParams } from './request-params';
import { CsgoStatsForPlayerBySerie, csgoStatsForPlayerBySerieResponse } from './models/csgo-stats-for-player-by-serie';
import { SerieIdOrSlug } from '../common/serie-id-or-slug';
import { CsgoStatsForTeamBySerie, csgoStatsForTeamBySerieResponse } from './models/csgo-stats-for-team-by-serie';
import { CsgoStatsForTeam, csgoStatsForTeamResponse } from './models/csgo-stats-for-team';
import {
  CsgoStatsForPlayerByTournament,
  csgoStatsForPlayerByTournamentResponse,
} from './models/csgo-stats-for-player-by-tournament';
import { TournamentIdOrSlug } from '../common/tournament-id-or-slug';
import {
  CsgoStatsForTeamByTournament,
  csgoStatsForTeamByTournamentResponse,
} from './models/csgo-stats-for-team-by-tournament';

export class CounterStrikeStatsService extends BaseService {
  /**
   * Get detailed statistics of Counter-Strike players for the given match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForAllPlayersByMatch>>} Statistics of all Counter-Strike players by match
   */
  async getCsgoMatchesMatchIdOrSlugPlayersStats(
    matchIdOrSlug: MatchIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForAllPlayersByMatch>> {
    const request = new RequestBuilder<CsgoStatsForAllPlayersByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/matches/{match_id_or_slug}/players/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForAllPlayersByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForAllPlayersByMatch>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike player for the given match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForPlayerByMatch>>} Statistics of a Counter-Strike player by match
   */
  async getCsgoMatchesMatchIdOrSlugPlayersPlayerIdOrSlugStats(
    matchIdOrSlug: MatchIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForPlayerByMatch>> {
    const request = new RequestBuilder<CsgoStatsForPlayerByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/matches/{match_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForPlayerByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForPlayerByMatch>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike team for the given match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForTeamByMatch>>} Statistics of a Counter-Strike team by match
   */
  async getCsgoMatchesMatchIdOrSlugTeamsTeamIdOrSlugStats(
    matchIdOrSlug: MatchIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForTeamByMatch>> {
    const request = new RequestBuilder<CsgoStatsForTeamByMatch>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/matches/{match_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForTeamByMatchResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForTeamByMatch>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike player
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @param {VideogameTitleIdOrSlug} [videogameTitle] -
   * @param {string} [from] - Filter out 'from' date
   * @param {string} [to] - Filter out 'to' date
   * @returns {Promise<HttpResponse<CsgoStatsForPlayer>>} Statistics of a Counter-Strike player
   */
  async getCsgoPlayersPlayerIdOrSlugStats(
    playerIdOrSlug: PlayerIdOrSlug,
    params?: GetCsgoPlayersPlayerIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForPlayer>> {
    const request = new RequestBuilder<CsgoStatsForPlayer>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForPlayerResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_title',
        value: params?.videogameTitle,
      })
      .addQueryParam({
        key: 'from',
        value: params?.from,
      })
      .addQueryParam({
        key: 'to',
        value: params?.to,
      })
      .build();
    return this.client.call<CsgoStatsForPlayer>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike player for the given serie
   * @param {SerieIdOrSlug} serieIdOrSlug - A serie ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForPlayerBySerie>>} Statistics of a Counter-Strike player by serie
   */
  async getCsgoSeriesSerieIdOrSlugPlayersPlayerIdOrSlugStats(
    serieIdOrSlug: SerieIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForPlayerBySerie>> {
    const request = new RequestBuilder<CsgoStatsForPlayerBySerie>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/series/{serie_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForPlayerBySerieResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'serie_id_or_slug',
        value: serieIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForPlayerBySerie>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike team for the given serie
   * @param {SerieIdOrSlug} serieIdOrSlug - A serie ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForTeamBySerie>>} Statistics of a Counter-Strike team by serie
   */
  async getCsgoSeriesSerieIdOrSlugTeamsTeamIdOrSlugStats(
    serieIdOrSlug: SerieIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForTeamBySerie>> {
    const request = new RequestBuilder<CsgoStatsForTeamBySerie>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/series/{serie_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForTeamBySerieResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'serie_id_or_slug',
        value: serieIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForTeamBySerie>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike team
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @param {VideogameTitleIdOrSlug} [videogameTitle] -
   * @param {string} [from] - Filter out 'from' date
   * @param {string} [to] - Filter out 'to' date
   * @returns {Promise<HttpResponse<CsgoStatsForTeam>>} Statistics of a Counter-Strike team
   */
  async getCsgoTeamsTeamIdOrSlugStats(
    teamIdOrSlug: TeamIdOrSlug,
    params?: GetCsgoTeamsTeamIdOrSlugStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForTeam>> {
    const request = new RequestBuilder<CsgoStatsForTeam>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForTeamResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .addQueryParam({
        key: 'videogame_title',
        value: params?.videogameTitle,
      })
      .addQueryParam({
        key: 'from',
        value: params?.from,
      })
      .addQueryParam({
        key: 'to',
        value: params?.to,
      })
      .build();
    return this.client.call<CsgoStatsForTeam>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike player for the given tournament
   * @param {TournamentIdOrSlug} tournamentIdOrSlug - A tournament ID or slug
   * @param {PlayerIdOrSlug} playerIdOrSlug - A player ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForPlayerByTournament>>} Statistics of a Counter-Strike player by tournament
   */
  async getCsgoTournamentsTournamentIdOrSlugPlayersPlayerIdOrSlugStats(
    tournamentIdOrSlug: TournamentIdOrSlug,
    playerIdOrSlug: PlayerIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForPlayerByTournament>> {
    const request = new RequestBuilder<CsgoStatsForPlayerByTournament>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/tournaments/{tournament_id_or_slug}/players/{player_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForPlayerByTournamentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'tournament_id_or_slug',
        value: tournamentIdOrSlug,
      })
      .addPathParam({
        key: 'player_id_or_slug',
        value: playerIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForPlayerByTournament>(request);
  }

  /**
   * Get detailed statistics of a given Counter-Strike team for the given tournament
   * @param {TournamentIdOrSlug} tournamentIdOrSlug - A tournament ID or slug
   * @param {TeamIdOrSlug} teamIdOrSlug - A team ID or slug
   * @returns {Promise<HttpResponse<CsgoStatsForTeamByTournament>>} Statistics of a Counter-Strike team by tournament
   */
  async getCsgoTournamentsTournamentIdOrSlugTeamsTeamIdOrSlugStats(
    tournamentIdOrSlug: TournamentIdOrSlug,
    teamIdOrSlug: TeamIdOrSlug,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoStatsForTeamByTournament>> {
    const request = new RequestBuilder<CsgoStatsForTeamByTournament>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/tournaments/{tournament_id_or_slug}/teams/{team_id_or_slug}/stats')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoStatsForTeamByTournamentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'tournament_id_or_slug',
        value: tournamentIdOrSlug,
      })
      .addPathParam({
        key: 'team_id_or_slug',
        value: teamIdOrSlug,
      })
      .build();
    return this.client.call<CsgoStatsForTeamByTournament>(request);
  }
}
