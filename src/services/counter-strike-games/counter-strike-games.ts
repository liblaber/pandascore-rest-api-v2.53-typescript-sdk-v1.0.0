// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { CsgoGame, csgoGameResponse } from './models/csgo-game';
import { CsgoEvent, csgoEventResponse } from './models/csgo-event';
import {
  GetCsgoGamesCsgoGameIdEventsParams,
  GetCsgoGamesCsgoGameIdRoundsParams,
  GetCsgoMatchesMatchIdOrSlugGamesParams,
} from './request-params';
import { CsgoFullRound, csgoFullRoundResponse } from './models/csgo-full-round';
import { MatchIdOrSlug } from '../common/match-id-or-slug';

export class CounterStrikeGamesService extends BaseService {
  /**
   * Get a single Counter-Strike game by ID
   * @param {number} csgoGameId - A Counter-Strike game ID
   * @returns {Promise<HttpResponse<CsgoGame>>} A Counter-Strike game
   */
  async getCsgoGamesCsgoGameId(csgoGameId: number, requestConfig?: RequestConfig): Promise<HttpResponse<CsgoGame>> {
    const request = new RequestBuilder<CsgoGame>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/games/{csgo_game_id}')
      .setRequestSchema(z.any())
      .setResponseSchema(csgoGameResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'csgo_game_id',
        value: csgoGameId,
      })
      .build();
    return this.client.call<CsgoGame>(request);
  }

  /**
   * List events for a given Counter-Strike game
   * @param {number} csgoGameId - A Counter-Strike game ID
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<CsgoEvent[]>>} A list of Counter-Strike game events
   */
  async getCsgoGamesCsgoGameIdEvents(
    csgoGameId: number,
    params?: GetCsgoGamesCsgoGameIdEventsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoEvent[]>> {
    const request = new RequestBuilder<CsgoEvent[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/games/{csgo_game_id}/events')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(csgoEventResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'csgo_game_id',
        value: csgoGameId,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<CsgoEvent[]>(request);
  }

  /**
   * List rounds in a Counter-Strike game
   * @param {number} csgoGameId - A Counter-Strike game ID
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<CsgoFullRound[]>>} List rounds in a Counter-Strike game
   */
  async getCsgoGamesCsgoGameIdRounds(
    csgoGameId: number,
    params?: GetCsgoGamesCsgoGameIdRoundsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoFullRound[]>> {
    const request = new RequestBuilder<CsgoFullRound[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/games/{csgo_game_id}/rounds')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(csgoFullRoundResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'csgo_game_id',
        value: csgoGameId,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<CsgoFullRound[]>(request);
  }

  /**
   * List games for a given Counter-Strike match
   * @param {MatchIdOrSlug} matchIdOrSlug - A match ID or slug
   * @param {FilterOverCsgoGames} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverCsgoGames} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {SearchOverCsgoGames} [search] - Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @returns {Promise<HttpResponse<CsgoGame[]>>} A list of Counter-Strike games
   */
  async getCsgoMatchesMatchIdOrSlugGames(
    matchIdOrSlug: MatchIdOrSlug,
    params?: GetCsgoMatchesMatchIdOrSlugGamesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CsgoGame[]>> {
    const request = new RequestBuilder<CsgoGame[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/csgo/matches/{match_id_or_slug}/games')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(csgoGameResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'match_id_or_slug',
        value: matchIdOrSlug,
      })
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'search',
        value: params?.search,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .build();
    return this.client.call<CsgoGame[]>(request);
  }
}
