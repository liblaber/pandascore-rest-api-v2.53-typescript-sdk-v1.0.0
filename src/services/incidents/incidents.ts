// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { NonDeletionIncident, nonDeletionIncidentResponse } from './models/non-deletion-incident';
import { GetAdditionsParams, GetChangesParams, GetDeletionsParams, GetIncidentsParams } from './request-params';
import { Incident, incidentResponse } from './models/incident';
import { DeletionIncident, deletionIncidentResponse } from './models/deletion-incident';

export class IncidentsService extends BaseService {
  /**
   * Get the latest additions. <br/> <br/>This endpoint only shows unchanged objects.
   * @param {FilterOverAdditionIncidents} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverAdditionIncidents} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @param {any[]} [type] - Filter by result type(s)
   * @param {string} [since] - Filter out older results
   * @param {VideogameIdOrSlug[]} [videogame] - Filter by videogame(s)
   * @returns {Promise<HttpResponse<NonDeletionIncident[]>>} A list of created entities
   */
  async getAdditions(
    params?: GetAdditionsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<NonDeletionIncident[]>> {
    const request = new RequestBuilder<NonDeletionIncident[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/additions')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(nonDeletionIncidentResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .addQueryParam({
        key: 'type',
        value: params?.type,
      })
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'videogame',
        value: params?.videogame,
      })
      .build();
    return this.client.call<NonDeletionIncident[]>(request);
  }

  /**
   * Get the latest updates. <br/> <br/>This endpoint only provides the latest change for an object. It does not keep track of previous changes.
   * @param {FilterOverChangeIncidents} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverChangeIncidents} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @param {any[]} [type] - Filter by result type(s)
   * @param {string} [since] - Filter out older results
   * @param {VideogameIdOrSlug[]} [videogame] - Filter by videogame(s)
   * @returns {Promise<HttpResponse<Incident[]>>} A list of changed entities
   */
  async getChanges(params?: GetChangesParams, requestConfig?: RequestConfig): Promise<HttpResponse<Incident[]>> {
    const request = new RequestBuilder<Incident[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/changes')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(incidentResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .addQueryParam({
        key: 'type',
        value: params?.type,
      })
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'videogame',
        value: params?.videogame,
      })
      .build();
    return this.client.call<Incident[]>(request);
  }

  /**
   * Get the latest deleted documents
   * @param {FilterOverDeletionIncidents} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverDeletionIncidents} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @param {any[]} [type] - Filter by result type(s)
   * @param {string} [since] - Filter out older results
   * @param {VideogameIdOrSlug[]} [videogame] - Filter by videogame(s)
   * @returns {Promise<HttpResponse<DeletionIncident[]>>} A list of deleted entities
   */
  async getDeletions(
    params?: GetDeletionsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeletionIncident[]>> {
    const request = new RequestBuilder<DeletionIncident[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/deletions')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(deletionIncidentResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .addQueryParam({
        key: 'type',
        value: params?.type,
      })
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'videogame',
        value: params?.videogame,
      })
      .build();
    return this.client.call<DeletionIncident[]>(request);
  }

  /**
   *  Get the latest updates and additions. <br/> <br/>This endpoint only provides the latest incident for an object. It does not keep track of previous incidents.
   * @param {FilterOverIncidents} [filter] - Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter).
   * @param {RangeOverIncidents} [range] - Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range).
   * @param {any[]} [sort] - Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort).
   * @param {Page} [page] - Pagination in the form of `page=2` or `page[size]=30&page[number]=2`
   * @param {number} [perPage] - Equivalent to `page[size]`
   * @param {any[]} [type] - Filter by result type(s)
   * @param {string} [since] - Filter out older results
   * @param {VideogameIdOrSlug[]} [videogame] - Filter by videogame(s)
   * @returns {Promise<HttpResponse<Incident[]>>} A list of created or updated entities
   */
  async getIncidents(params?: GetIncidentsParams, requestConfig?: RequestConfig): Promise<HttpResponse<Incident[]>> {
    const request = new RequestBuilder<Incident[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/incidents')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(incidentResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filter',
        value: params?.filter,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'range',
        value: params?.range,
        style: SerializationStyle.DEEP_OBJECT,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'page',
        value: params?.page,
      })
      .addQueryParam({
        key: 'per_page',
        value: params?.perPage,
      })
      .addQueryParam({
        key: 'type',
        value: params?.type,
      })
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'videogame',
        value: params?.videogame,
      })
      .build();
    return this.client.call<Incident[]>(request);
  }
}
